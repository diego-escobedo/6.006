import unittest
from Temperature_DB import Temperature_DB

# prints trees for first three tests when True
show_trees = True   

tests = (
    (
        (('r', 46, 16), ('r', 8, 44), ('r', 44, 9), ('r', 32, 22), ('r', 15, 41), ('r', 47, 46), ('r', 4, 26), ('m', 17, 30), ('m', 1, 23), ('m', 39, 43)),
        (32, 46, 15),
    ),
    (
        (('r', 96, 96), ('r', 66, 71), ('r', 49, 11), ('r', 28, 33), ('r', 25, 12), ('r', 36, 60), ('r', 25, 34), ('r', 52, 89), ('r', 44, 49), ('r', 78, 12), ('m', 12, 77), ('m', 38, 71), ('m', 64, 91), ('m', 26, 42), ('m', 62, 87)),
        (78, 66, 66, 28, 66),
    ),
    (
        (('r', 250, 88), ('r', 358, 208), ('r', 329, 112), ('r', 125, 105), ('r', 197, 119), ('r', 316, 269), ('r', 34, 51), ('r', 58, 84), ('r', 354, 200), ('r', 357, 278), ('r', 295, 244), ('r', 358, 323), ('r', 75, 292), ('r', 97, 180), ('r', 254, 66), ('r', 98, 371), ('r', 249, 198), ('r', 38, 161), ('r', 203, 74), ('r', 216, 103), ('m', 64, 79), ('m', 164, 276), ('m', 263, 290), ('m', 124, 151), ('m', 215, 349), ('m', 36, 398), ('m', 36, 185), ('m', 138, 205), ('m', 165, 247), ('m', 137, 255)),
        (254, 358, 357, None, 358, 358, 329, 354, 358, 358),
    ),
    (
        (('r', 249, 110), ('r', 583, 141), ('r', 642, 810), ('r', 527, 715), ('r', 181, 572), ('r', 314, 243), ('r', 876, 41), ('r', 254, 678), ('r', 187, 649), ('r', 898, 411), ('r', 157, 352), ('r', 235, 536), ('r', 452, 378), ('r', 80, 879), ('r', 468, 657), ('r', 858, 256), ('r', 357, 55), ('r', 19, 19), ('r', 11, 463), ('r', 69, 203), ('r', 566, 768), ('r', 249, 313), ('r', 29, 7), ('r', 491, 74), ('r', 262, 585), ('r', 30, 289), ('r', 793, 714), ('r', 66, 342), ('r', 413, 675), ('r', 872, 529), ('m', 627, 754), ('m', 128, 762), ('m', 516, 536), ('m', 516, 735), ('m', 344, 587), ('m', 341, 796), ('m', 280, 373), ('m', 234, 413), ('m', 298, 627), ('m', 23, 807), ('m', 711, 893), ('m', 614, 698), ('m', 153, 873), ('m', 444, 807), ('m', 9, 345)),
        (793, 898, 872, 872, 898, 898, 249, 898, 898, 898, 793, 468, 898, 872, 876),
    ),
    (
        (('r', 376, 88), ('r', 2301, 110), ('r', 719, 1977), ('r', 287, 1587), ('r', 1077, 1984), ('r', 1851, 2089), ('r', 1080, 1607), ('r', 1519, 1400), ('r', 819, 1180), ('r', 2318, 2322), ('r', 1746, 1), ('r', 1289, 1447), ('r', 1597, 833), ('r', 976, 531), ('r', 1461, 1554), ('r', 1180, 1811), ('r', 1365, 953), ('r', 1963, 523), ('r', 553, 1697), ('r', 819, 689), ('r', 245, 1714), ('r', 2125, 687), ('r', 2118, 865), ('r', 136, 1312), ('r', 490, 1861), ('r', 1170, 1415), ('r', 2471, 11), ('r', 828, 1544), ('r', 2200, 24), ('r', 1454, 540), ('r', 373, 1258), ('r', 1704, 12), ('r', 503, 1494), ('r', 895, 452), ('r', 1394, 1255), ('r', 1209, 1180), ('r', 1722, 2346), ('r', 1391, 2200), ('r', 1315, 28), ('r', 845, 153), ('r', 1672, 2064), ('r', 1884, 2197), ('r', 1379, 2036), ('r', 1513, 2409), ('r', 1519, 457), ('r', 985, 681), ('r', 738, 1069), ('r', 2114, 897), ('r', 2275, 90), ('r', 590, 626), ('m', 1642, 1996), ('m', 816, 831), ('m', 1228, 1854), ('m', 223, 559), ('m', 1620, 1750), ('m', 258, 1554), ('m', 828, 2003), ('m', 1800, 2088), ('m', 1000, 2152), ('m', 472, 1102), ('m', 113, 2139), ('m', 1378, 2100), ('m', 196, 1482), ('m', 976, 1079), ('m', 109, 111), ('m', 287, 1222), ('m', 767, 924), ('m', 171, 529), ('m', 922, 1387), ('m', 1748, 2083), ('m', 1744, 2242), ('m', 1864, 2334), ('m', 491, 775), ('m', 149, 1490), ('m', 547, 1045)),
        (1180, None, 1519, 1963, 553, 2125, 2118, 1672, 1851, 2125, 2125, 1851, 2125, 738, 2301, 2125, 2118, 1963, 1394, 1672, 1884, 2318, 2125, 2125, 2125),
    ),
)

def check(test):
    ops, staff_sol = test
    DS = Temperature_DB()
    student_sol = []
    for op, arg1, arg2 in ops:
        if op is 'r':   DS.record_temp(arg1, arg2)
        if op is 'm':   student_sol.append(DS.max_in_range(arg1, arg2))
    if show_trees and len(ops) < 40:
        print('\n%s' % str(DS))
    for i in range(len(staff_sol)):
        if student_sol[i] != staff_sol[i]:  return False
    return True

class TestCases(unittest.TestCase):
    def test_01(self): self.assertTrue(check(tests[ 0]))
    def test_02(self): self.assertTrue(check(tests[ 1]))
    def test_03(self): self.assertTrue(check(tests[ 2]))
    def test_04(self): self.assertTrue(check(tests[ 3]))
    def test_05(self): self.assertTrue(check(tests[ 4]))

if __name__ == '__main__':
   res = unittest.main(verbosity = 3, exit = False)
